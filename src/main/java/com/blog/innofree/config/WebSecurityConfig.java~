//package com.blog.innofree.config;
//
//import com.blog.innofree.service.user.UserDetailService;
//import lombok.RequiredArgsConstructor;
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//import org.springframework.security.authentication.AuthenticationManager;
//import org.springframework.security.authentication.ProviderManager;
//import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
//import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
//import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
//import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
//
//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
//import org.springframework.security.web.SecurityFilterChain;
//import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
//
//import static org.springframework.boot.autoconfigure.security.servlet.PathRequest.toH2Console;
//
//@Configuration
//@EnableWebSecurity
//@RequiredArgsConstructor
//public class WebSecurityConfig {
//
//    private final UserDetailService userService;
//
//    // 1. 특정 리소스 스프링 시큐리티 기능 비활성화
//    @Bean
//    public WebSecurityCustomizer configure() {
//        return (web) -> web.ignoring()
//                .requestMatchers(toH2Console())
//                .requestMatchers(new AntPathRequestMatcher(("/static/**")));
//    }
//
//    // 2. 특정 HTTP 요청에 대한 웹기반 보안 구성
//    @Bean
//    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
//        return http
//                .authorizeRequests(auth -> auth // 3. 인증 , 인가 설정
//                        .requestMatchers(
//                                new AntPathRequestMatcher("/login"),
//                                new AntPathRequestMatcher("/signup"),
//                                new AntPathRequestMatcher("/user")
//                        ).permitAll() // 인증, 인가 없이 누구나 접근가능
//                        .anyRequest() // 위에서 설정한 url 이외의 요청에 대해 설정
//                        .authenticated() // 별도의 인가는 필요하지않지만 인증이 성공된 상태여야 접근가능
//                )
//                .formLogin(formLogin -> formLogin // 4. 폼기반 로그인 설정
//                        .loginPage("/login")
//                        .defaultSuccessUrl("/articles")
//                )
//                .logout(logout -> logout // 5. 로그아웃 설정
//                        .logoutSuccessUrl("/login")
//                        .invalidateHttpSession(true) // 로그아웃 이후 세션 전체를 삭제할지 여부
//                )
//                .csrf(AbstractHttpConfigurer::disable) // 6. CSRF 설정
//                .build();
//    }
//
//    // 7. 인증 관리자 관련 설정 (사용자정보 가져올 서비스 재정의 , 인증방법 설정)
//    @Bean
//  public AuthenticationManager authenticationManager(HttpSecurity http
//            , BCryptPasswordEncoder bCryptPasswordEncoder
//            , UserDetailService userDetailService) throws Exception {
//
//        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
//        authProvider.setUserDetailsService(userService); // 사용자 정보를 가져올서비스 설정 , 이때 설정하는서비스 클래스는 반드시 UserDetailsService를 상속받은 클래스여야함
//        authProvider.setPasswordEncoder(bCryptPasswordEncoder); // 비밀번호 암호화 인코더
//
//        return new ProviderManager(authProvider);
//    }
//
//    // 9. 패스워드 인코더로 사용할 빈 등록
//    @Bean
//    public BCryptPasswordEncoder bCryptPasswordEncoder() {
//        return new BCryptPasswordEncoder();
//    }
//}
